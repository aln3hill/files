1. In your own words, explain what clean code is and why it is important.

Answer:
Clean code is easy to maintain, debug and understand. However, writing clean code can be trickier than it sounds. When writing clean code you need to use correct naming, write DRY code, 
write code that is as explicit as possible so only the most basic commenting is needed, write clear singular responsibility methods and classes, limit the levels of nesting to the minimum 
needed and aim for simplicity. Clean code is very important if you’re collaborating with others in a project and the importance is increasing with the number of people you’re collaborating with. 
Complex projects can easily get very messy if you’re not writing high quality clean code.   

2. Read this article about Toyota and their use of bad code. Although you may not yet understand all of the topics discussed, think about another commonly used object that relies on 
computers and explain what would happen if the code was not created to an acceptable standard.

Answer: 
ATMs. We rely daily on that ATMs are handling our money safely and correctly. However, what if the code wouldn’t reach all the safety standards and have undetected bugs in them? 
Our money, credit cards and account data would be at great risk. The risk of hackers hacking the system and accessing all the sensitive information would be much greater with flaws 
in the code. Also, deducting money from the right account could potentially also be at risk. Basically, if the code in ATMs would contain flaws, there are huge security and integrity risks
that could affect many peoples’ personal life.  

3. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.
FUNCTION do(x, y)               // Creating a new function  
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x?32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

Answer: 
I don’t consider the above clean code. The things I would like to change are:
* Naming of method. It is not obvious what it does. 
* Intendation of the code. It is currently hard to read. 
* The code is overly commented. 

Refactored code below:

FUNCTION convertDegrees(x, y)               
 	IF y = "F" THEN               
 		SET z to (x?32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 		PRINT z                       
 	ELSE IF y = "C" THEN          
 		SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 		PRINT z                       
 	END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

Answer: 
The code is correctly intended and not overly commented, however it is lacking comments altogether and the function name is shortened which can make it harder to understand. 

Refactored code below:
FUNCTION calculatePercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100		//Function to calculate percent
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION


5. Using pseudocode, refactor the code for the following examples using the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction and receives payment accordingly.

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE IF paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


Refactored code:

FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)
   CALL makePaymentType(subTotal, discountRate, paymentType)
END FUNCTION

FUNCTION makePaymentType(subTotal, discountRate, paymentType)
  IF paymentType = 'CASH' THEN
      CALCULATE amount to return
      PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
  ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION


b. The following function checks out a book if there are no issues with the guest's account.

FUNCTION checkoutBook(book, guest)

 IF guest.accountActive THEN
     IF NOT(guest.hasOverdueBooks) THEN
         IF guest.outstandingFees = 0 THEN
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
         END IF
     END IF
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION




Refactored code:

FUNCTION checkoutBook(book, guest)
 IF (guest.accountActive && !guest.hasOverdueBooks && guest.outstandingFees = 0) THEN   
           APPEND book to guest.books
           SET book.status to "Checked Out"
           PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF

END FUNCTION


c. The following class is a code snippet that should support the transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance – amount
     END 
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

Refactored code:

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdrawMoney(amount)
     IF balance > amount THEN
       SET balance to balance – amount
     ELSE 
       PRINT “Cash balance is too low, withdrawal not possible”	
     END IF
 END FUNCTION
END

CLASS NewBankOffers

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END IF
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END IF
 END FUNCTION

END


Programming Questions

You may do the following problems in any language of your choice. Use the clean code principles taught in this section while writing the code.

6. Square Given an array of integers, find out whether the sum of the integers is a perfect square. If it is a perfect square, return the square root, otherwise return the sum.
Example:
[10,1,4,6,1,1,2] returns 5 because the square root of 25 is 5.
[1,1] returns 2 because 2 is not a perfect square.
The square root of 2 is approximately 1.414213562373095.

My code: 

function findPerfectSquare(numbersArray){
  const reducer = (accumulator, currentValue) => accumulator + currentValue;	//reducer function
  let sumOfArray = numbersArray.reduce(reducer);	//calculating the sum of array with reducer
  if (sumOfArray % Math.sqrt(sumOfArray) === 0){	//checking if the square is perfect
    return Math.sqrt(sumOfArray);
  }
  else return sumOfArray;
}

7. Duplicate Given an array of integers, find out whether the array contains any duplicate elements. The function should return true if any value appears at least twice in the array, 
and false if every element is distinct.

My code:

function isDuplicates(integersArray){
  for (let i = 0; i < integersArray.length; i++){
    for (let j = 1; j < integersArray.length; j++){
      if(integersArray[i] === integersArray[j]){
        return true;
      }
    }
   return false;
  }
}


Extra Credit

8. Anagram An anagram is a word, phrase, or name formed by rearranging the letters of another word. For example, spar can be formed from rasp. Given two strings, stringOne and stringTwo, 
determine if stringOne is an anagram of stringTwo. Assume that the strings contain only lowercase letters and do not worry about case-sensitivity. Hint: Your first task will be to convert 
the strings to arrays.

My code:

function isAnagram(stringOne, stringTwo){
  let arrayOne = stringOne.split('');
  let arrayTwo = stringTwo.split('');
  let temp = [];
  for (let i = 0; i < arrayOne.length; i++){
    for (let j = 0; j < arrayTwo.length; j++){
      if(arrayOne[i]=== arrayTwo[j]){	//comparing elements and if equal, adding to temporary array
        temp.push(j);
      }
    }
  }
  If (temp.length === arrayOne.length){	//checking if all letters been added to temporary array
    return true;
  }
  else return false
}
